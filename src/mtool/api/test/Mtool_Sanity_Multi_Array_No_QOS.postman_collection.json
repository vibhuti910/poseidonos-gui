{
	"info": {
		"_postman_id": "5d9a376e-bcf5-4044-ab38-327d5a0a9cc9",
		"name": "Mtool_Sanity_Multi_Array_No_QOS",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token = response[\"token\"];\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', token);\r",
							"postman.setEnvironmentVariable(\"token\", token);\r",
							"//pm.environment.set('token', token);\r",
							"\r",
							"// console.log(token);\r",
							"\r",
							"pm.test(\"Logged in as admin...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"admin\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/login/",
				"description": "login to MTool"
			},
			"response": []
		},
		{
			"name": "Stop ibofos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let res = pm.response.json();\r",
							"\r",
							"pm.test(\"DAgent reponse is... \" +  res[\"response\"], function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"if (responseCode.code === 200 || responseCode.code === 500) {\r",
							"    console.log(\" in if \")\r",
							"    setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 20000);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1.0/stop_ibofos"
			},
			"response": []
		},
		{
			"name": "Start ibofos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200 || responseCode.code === 500) {\r",
							"    setTimeout(function () {\r",
							"    }, 10000);\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"DAgent reponse is... \" + jsonData[\"response\"], function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 500]);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1.0/start_ibofos"
			},
			"response": []
		},
		{
			"name": "IsPOS-Running",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"POS is Running...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify Json values\", function () {\r",
							"    try {\r",
							"       pm.expect(jsonData.RESULT.result.status.description).is.to.equal(\"NONE\");\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Could not start POS\") });\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1.0/get_Is_Ibof_OS_Running/"
			},
			"response": []
		},
		{
			"name": "Get POS Property",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"POS is Running...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify Json values\", function () {\r",
							"    try {\r",
							"       pm.expect(jsonData.RESULT.result.status.description).is.to.equal(\"NONE\");\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Could not start POS\") });\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1.0/get_Is_Ibof_OS_Running/"
			},
			"response": []
		},
		{
			"name": "Set POS Property",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"POS is Running...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify Json values\", function () {\r",
							"    try {\r",
							"       pm.expect(jsonData.RESULT.result.status.description).is.to.equal(\"NONE\");\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Could not start POS\") });\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"property\": \"medium\"\r\n}"
				},
				"url": "http://{{host}}:{{port}}/api/v1/pos/property"
			},
			"response": []
		},
		{
			"name": "Create URAM device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\": \"uram4\",\r\n\t\t\"num_blocks\" : 16777216,\r\n\t\t\"block_size\" : 512,\r\n\t\t\"dev_type\" : \"uram\",\r\n\t\t\"numa\" : 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/device/"
			},
			"response": []
		},
		{
			"name": "Get devices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"console.log(response);\r",
							"let deviceCount = 0;\r",
							"/*\r",
							"try {\r",
							"    let devices = response.devices.map(d => d.name)\r",
							"    deviceCount = devices.length;\r",
							"    console.log(\"devices-> \", devices)\r",
							"    // save the token value to variables so that it can used in subsequent APIs\r",
							"    pm.variables.set('device', devices[0]);\r",
							"    console.log('device is....', devices[0]);\r",
							"    postman.setEnvironmentVariable(\"device\", devices[0]);\r",
							"}\r",
							"catch (err) {\r",
							"    console.log('err....', err);\r",
							"}\r",
							"pm.test(\"Get device info...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"if (deviceCount > 0) {\r",
							"    //Devices.. Create or use existing array\r",
							"    console.log(deviceCount, ' device found.... Creating array or using existing array now...');\r",
							"   // postman.setNextRequest(\"Delete Array\");\r",
							"    // postman.setNextRequest(\"Create Array\")\r",
							"\r",
							"} else {\r",
							"    //no devices.. logout \r",
							"    console.log('No Device found...... Exiting now...');\r",
							"    //postman.setNextRequest(\"logout\");\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//setTimeout( function() {}, 2000)\r",
							"//pm.Wait(5000);\r",
							"\r",
							"let temp_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiJhZG1pbiIsImV4cCI6MTU5NzQwMDc3Mn0.u2dTsSz6OKOHQKLt2XjpRPFLRCJmzlC7dafmrq_VcWc'\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1.0/get_devices/"
			},
			"response": []
		},
		{
			"name": "unmount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/array/mount"
			},
			"response": []
		},
		{
			"name": "unmount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/array/mount"
			},
			"response": []
		},
		{
			"name": "ARRAY RESET",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"LIST ARRAY DEVICE\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{$guid}}"
					},
					{
						"key": "ts",
						"value": "{{$timestamp}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{basic_auth}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "http://{{host}}/api/ibofos/v1/arrays/reset"
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-Id",
								"value": "{{$guid}}"
							},
							{
								"key": "ts",
								"value": "{{$timestamp}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{basic_auth}}"
							}
						],
						"url": "http://{{host}}/mtool/api/ibofos/v1/array/device"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "X-Request-Id",
							"value": "6e787e27-1964-44da-bcdf-b5f44ffbd1a3"
						},
						{
							"key": "Date",
							"value": "Fri, 08 May 2020 06:51:22 GMT"
						},
						{
							"key": "Content-Length",
							"value": "437"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"rid\": \"6e787e27-1964-44da-bcdf-b5f44ffbd1a3\",\n    \"lastSuccessTime\": 1588920682,\n    \"result\": {\n        \"status\": {\n            \"module\": \"\",\n            \"code\": 0,\n            \"description\": \"DONE\"\n        },\n        \"data\": {\n            \"devicelist\": [\n                {\n                    \"name\": \"uram0\",\n                    \"type\": \"BUFFER\"\n                },\n                {\n                    \"name\": \"unvme-ns-0\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-1\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-2\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-3\",\n                    \"type\": \"SPARE\"\n                }\n            ]\n        }\n    },\n    \"info\": {\n        \"state\": \"OFFLINE\",\n        \"situation\": \"DEFAULT\",\n        \"rebulidingProgress\": 0,\n        \"capacity\": 0,\n        \"used\": 0\n    }\n}"
				}
			]
		},
		{
			"name": "Delete 1st Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    try {\r",
							"        response = jsonData.result.description\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"if (responseCode.code === 200) {\r",
							"    // Delay for 12 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 500);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"arrayname\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/delete_array/{{arrayName1}}"
			},
			"response": []
		},
		{
			"name": "Delete 2nd Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    try {\r",
							"        response = jsonData.result.description\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"if (responseCode.code === 200) {\r",
							"    // Delay for 12 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 500);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"arrayname\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/delete_array/{{arrayName2}}"
			},
			"response": []
		},
		{
			"name": "Create 1st Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//pm.test(\"Created an array...\", function () {\r",
							"//   pm.response.to.have.status(200);\r",
							"//});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.result.status.description);\r",
							"let status = \"Code: \" + jsonData.result.status.code + \" Level: \" + jsonData.result.status.level + \" Description: \" + jsonData.result.status.description;\r",
							"console.log(jsonData.result);\r",
							"//let description = jsonData.result.status;\r",
							"pm.test(\"DAgent response is... \" + status, function () {\r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"NONE\");\r",
							"});\r",
							"/*\r",
							"let statusDesc = jsonData.result.status.description;\r",
							"\r",
							"if (statusDesc.toLowerCase() == \"success\") {\r",
							"    setTimeout(function () {\r",
							"    }, 2000);\r",
							"\r",
							"    // Create Volume\r",
							"    postman.setNextRequest(\"Create Volume\")\r",
							"} else {\r",
							"\r",
							"    console.log('Array creating failed .... exiting..');\r",
							"\r",
							"    // try restarting POS\r",
							"    let restartCount = pm.environment.get(\"posRestartCount\");\r",
							"    if (restartCount <= 3) {\r",
							"        // increment restart count \r",
							"        pm.environment.set(\"posRestartCount\", (restartCount + 1));\r",
							"        // Try restart \r",
							"        postman.setNextRequest(\"Stop ibofos\");\r",
							"\r",
							"    } else {\r",
							"        // Fail and logout\r",
							"        postman.setNextRequest(\"logout\");\r",
							"    }\r",
							"\r",
							"\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"arrayname\": \"{{arrayName1}}\",\r\n    \"raidtype\": \"RAID5\",\r\n    \"storageDisks\": [\r\n        {\r\n            \"deviceName\": \"{{storageDisk1}}\"\r\n        },\r\n        {\r\n            \"deviceName\": \"{{storageDisk2}}\"\r\n        },\r\n        {\r\n            \"deviceName\": \"{{storageDisk3}}\"\r\n        }\r\n    ],\r\n    \"spareDisks\": [\r\n         {\r\n            \"deviceName\": \"{{spareDisk1}}\"\r\n        }\r\n    ],\r\n    \"writeBufferDisk\": [],\r\n    \"metaDisk\": \"{{WBPDisk1}}\",\r\n    \"writeThroughModeEnabled\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/create_arrays/"
			},
			"response": []
		},
		{
			"name": "Auto Create Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//pm.test(\"Created an array...\", function () {\r",
							"//   pm.response.to.have.status(200);\r",
							"//});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.result.status.description);\r",
							"let status = \"Code: \" + jsonData.result.status.code + \" Level: \" + jsonData.result.status.level + \" Description: \" + jsonData.result.status.description;\r",
							"console.log(jsonData.result);\r",
							"//let description = jsonData.result.status;\r",
							"pm.test(\"DAgent response is... \" + status, function () {\r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"NONE\");\r",
							"});\r",
							"/*\r",
							"let statusDesc = jsonData.result.status.description;\r",
							"\r",
							"if (statusDesc.toLowerCase() == \"success\") {\r",
							"    setTimeout(function () {\r",
							"    }, 2000);\r",
							"\r",
							"    // Create Volume\r",
							"    postman.setNextRequest(\"Create Volume\")\r",
							"} else {\r",
							"\r",
							"    console.log('Array creating failed .... exiting..');\r",
							"\r",
							"    // try restarting POS\r",
							"    let restartCount = pm.environment.get(\"posRestartCount\");\r",
							"    if (restartCount <= 3) {\r",
							"        // increment restart count \r",
							"        pm.environment.set(\"posRestartCount\", (restartCount + 1));\r",
							"        // Try restart \r",
							"        postman.setNextRequest(\"Stop ibofos\");\r",
							"\r",
							"    } else {\r",
							"        // Fail and logout\r",
							"        postman.setNextRequest(\"logout\");\r",
							"    }\r",
							"\r",
							"\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"arrayname\": \"{{arrayName2}}\",\r\n    \"raidtype\": \"RAID5\",\r\n    \"metaDisk\": \"{{WBPDisk2}}\",\r\n    \"num_data\" : 3,\r\n\t\"num_spare\" : 0,\r\n    \"writeThroughModeEnabled\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/autoarray/"
			},
			"response": []
		},
		{
			"name": "Create Transport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"transport_type\": \"tcp\",\r\n        \"buf_cache_size\": 64,\r\n        \"num_shared_buf\": 4096\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/transport/"
			},
			"response": []
		},
		{
			"name": "Create Subsystem1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\":\"nqn.2019-04.pos:subsystem1\",\r\n        \"sn\": \"POS0000000003\",\r\n        \"mn\": \"IBOF_VOLUME_EEEXTENSION\",\r\n        \"max_namespaces\": 256,\r\n        \"allow_any_host\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/subsystem/"
			},
			"response": []
		},
		{
			"name": "Create Subsystem2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\":\"nqn.2019-04.pos:subsystem2\",\r\n        \"sn\": \"POS0000000003\",\r\n        \"mn\": \"IBOF_VOLUME_EEEXTENSION\",\r\n        \"max_namespaces\": 256,\r\n        \"allow_any_host\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/subsystem/"
			},
			"response": []
		},
		{
			"name": "Add listener1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\":\"nqn.2019-04.pos:subsystem1\",\r\n        \"transport_type\":\"tcp\",\r\n        \"target_address\":\"{{host}}\",\r\n        \"transport_service_id\":\"1158\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/listener/"
			},
			"response": []
		},
		{
			"name": "Add listener2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\":\"nqn.2019-04.pos:subsystem2\",\r\n        \"transport_type\":\"tcp\",\r\n        \"target_address\":\"{{host}}\",\r\n        \"transport_service_id\":\"1158\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/listener/"
			},
			"response": []
		},
		{
			"name": "List Susbsystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/subsystem/"
			},
			"response": []
		},
		{
			"name": "Get Arrays",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Array Info is retrieved...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"if (jsonData.length == 0) {\r",
							"    console.log('Creating new array....');\r",
							"} else {\r",
							"    console.log('Array exists.... Creating volume.');\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let temp_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiJhZG1pbiIsImV4cCI6MTU5NzQwMDc3Mn0.u2dTsSz6OKOHQKLt2XjpRPFLRCJmzlC7dafmrq_VcWc'"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/get_arrays/"
			},
			"response": []
		},
		{
			"name": "remove spare disk in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk1}}\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/remove_spare_device/"
			},
			"response": []
		},
		{
			"name": "add spare disk in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk1}}\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/add_spare_device/"
			},
			"response": []
		},
		{
			"name": "replace array device in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"device\": \"{{storageDisk1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/array/{{arrayName1}}/replace"
			},
			"response": []
		},
		{
			"name": "add spare disk in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk2}}\", \"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/add_spare_device/"
			},
			"response": []
		},
		{
			"name": "Create 3 Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{volNameArr1}}\",\r\n    \"size\": \"20\",\r\n    \"description\": \"\",\r\n    \"unit\": \"GB\",\r\n    \"maxbw\": 0,\r\n    \"maxiops\": 0,\r\n    \"count\": \"3\",\r\n    \"suffix\": 0,\r\n    \"stop_on_error\": false,\r\n    \"mount_vol\": true,\r\n    \"array\": \"{{arrayName1}}\",\r\n    \"max_available_size\": \"{{globals.totalsize}}\",\r\n    \"iswalvol\": false,\r\n    \"subsystem\": {\r\n        \"subnqn\": \"nqn.2019-04.pos:subsystem1\",\r\n        \"transport_type\": \"TCP\",\r\n        \"transport_service_id\": \"1158\",\r\n        \"target_address\": \"{{host}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/save-volume/"
			},
			"response": []
		},
		{
			"name": "Create single Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{volNameArr1_1}}\",\r\n    \"size\": \"20\",\r\n    \"description\": \"\",\r\n    \"unit\": \"GB\",\r\n    \"maxbw\": 0,\r\n    \"maxiops\": 0,\r\n    \"count\": \"1\",\r\n    \"suffix\": 0,\r\n    \"stop_on_error\": false,\r\n    \"mount_vol\": true,\r\n    \"array\": \"{{arrayName1}}\",\r\n    \"max_available_size\": \"{{globals.totalsize}}\",\r\n    \"iswalvol\": false,\r\n    \"subsystem\": {\r\n        \"subnqn\": \"nqn.2019-04.pos:subsystem1\",\r\n        \"transport_type\": \"TCP\",\r\n        \"transport_service_id\": \"1158\",\r\n        \"target_address\": \"{{host}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/save-volume/"
			},
			"response": []
		},
		{
			"name": "Get Volumes of 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify volume count\", function () {\r",
							"    // console.log(\"len \",volArr.length)\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/{{arrayName1}}/get_volumes/"
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User deleted\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"ids\": [\"pkadmin\"]}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/delete_users/"
			},
			"response": []
		},
		{
			"name": "Add Custom Admin User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// reset \r",
							"pm.variables.set('token', '');\r",
							"\r",
							"if (responseCode.code === 200 || responseCode.code === 400) {\r",
							"    // Delay for 15 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 15000);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"pkadmin\",\"password\":\"pkadmin@123\",\"confirmpassword\":\"pkadmin\",\"user_role\":\"Admin\",\"mobilenumber\":\"+82 123 1231 234\",\"emailid\":\"pk@pk.com\",\"phone_number\":\"+82\",\"error\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/add_new_user/"
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"_id\": \"pkadmin\", \"password\": \"pkadmin@123\",\"oldid\": \"pk@pk.com\", \"email\": \"pk@test.com\", \"phone_number\": \"+918298989898\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/update_user/"
			},
			"response": []
		},
		{
			"name": "Login as Custom Admin user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token =  response[\"token\"];\r",
							"\r",
							"// reset \r",
							"pm.variables.set('token', '');\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', token);\r",
							"//pm.environment.set('token', token);\r",
							"\r",
							"// console.log(token);\r",
							"\r",
							"pm.test(\"PKAdmin logged in as admin...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"pkadmin\",\"password\":\"pkadmin@123\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/login/"
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Received Users\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Verify user count\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1.0/get_users/"
			},
			"response": []
		},
		{
			"name": "Get Smart Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1.0/device/smart/{{storageDisk1}}"
			},
			"response": []
		},
		{
			"name": "Create 3 Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 5000);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{volNameArr2}}\",\r\n    \"size\": \"20\",\r\n    \"description\": \"\",\r\n    \"unit\": \"GB\",\r\n    \"maxbw\": 0,\r\n    \"maxiops\": 0,\r\n    \"count\": \"3\",\r\n    \"suffix\": 0,\r\n    \"stop_on_error\": false,\r\n    \"mount_vol\": true,\r\n    \"array\": \"{{arrayName2}}\",\r\n    \"max_available_size\": \"{{globals.totalsize}}\",\r\n    \"iswalvol\": false,\r\n    \"subsystem\": {\r\n        \"subnqn\": \"nqn.2019-04.pos:subsystem1\",\r\n        \"transport_type\": \"TCP\",\r\n        \"transport_service_id\": \"1158\",\r\n        \"target_address\": \"{{host}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/save-volume/"
			},
			"response": []
		},
		{
			"name": "Create single Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{volNameArr2_1}}\",\r\n    \"size\": \"20\",\r\n    \"description\": \"\",\r\n    \"unit\": \"GB\",\r\n    \"maxbw\": 0,\r\n    \"maxiops\": 0,\r\n    \"count\": \"1\",\r\n    \"suffix\": 0,\r\n    \"stop_on_error\": false,\r\n    \"mount_vol\": true,\r\n    \"array\": \"{{arrayName2}}\",\r\n    \"max_available_size\": \"{{globals.totalsize}}\",\r\n    \"iswalvol\": false,\r\n    \"subsystem\": {\r\n        \"subnqn\": \"nqn.2019-04.pos:subsystem1\",\r\n        \"transport_type\": \"TCP\",\r\n        \"transport_service_id\": \"1158\",\r\n        \"target_address\": \"{{host}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/save-volume/"
			},
			"response": []
		},
		{
			"name": "Get Volumes of 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify volume count\", function () {\r",
							"    // console.log(\"len \",volArr.length)\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/{{arrayName2}}/get_volumes/"
			},
			"response": []
		},
		{
			"name": "rename vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr1}}0\", \"newname\": \"{{volNameArr1}}0_renamed\", \"array\": \"{{arrayName1}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr1}}0"
			},
			"response": []
		},
		{
			"name": "rename vol_arr2_0 in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// var jsonData = pm.response.json();\r",
							"// try {\r",
							"//     response = jsonData.result.status.description\r",
							"// }\r",
							"// catch (err) {\r",
							"//     pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"// }\r",
							"\r",
							"// pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"//        pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr2}}0\", \"newname\": \"{{volNameArr2}}0_renamed\", \"array\": \"{{arrayName2}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr2}}0"
			},
			"response": []
		},
		{
			"name": "rename vol_arr1_0 Back in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// var jsonData = pm.response.json();\r",
							"// try {\r",
							"//     response = jsonData.result.status.description\r",
							"// }\r",
							"// catch (err) {\r",
							"//     pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"// }\r",
							"\r",
							"// pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"//        pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr1}}0_renamed\", \"newname\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr1}}0_renamed"
			},
			"response": []
		},
		{
			"name": "rename vol_arr2_0 Back in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// var jsonData = pm.response.json();\r",
							"// try {\r",
							"//     response = jsonData.result.status.description\r",
							"// }\r",
							"// catch (err) {\r",
							"//     pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"// }\r",
							"\r",
							"// pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"//        pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr2}}0_renamed\", \"newname\": \"{{volNameArr2}}0\", \"array\": \"{{arrayName2}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr2}}0_renamed"
			},
			"response": []
		},
		{
			"name": "unmount vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Volume updated...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"console.log(jsonData.result.status.description)\r",
							"pm.test(\"Verify Json values\", function () { \r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"NONE\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/volume/mount"
			},
			"response": []
		},
		{
			"name": "mount vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// var jsonData = pm.response.json();\r",
							"// try {\r",
							"//     response = jsonData.result.status.description\r",
							"// }\r",
							"// catch (err) {\r",
							"//     pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"// }\r",
							"\r",
							"// pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"//        pm.expect(response).is.to.equal(\"NONE\");\r",
							"    \r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\",\"subnqn\": \"nqn.2019-04.pos:subsystem1\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/volume/mount"
			},
			"response": []
		},
		{
			"name": "Delete Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete volume successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volumes\": [{\"name\": \"{{volNameArr1}}0\", \"isMounted\": true}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/delete_volumes/{{arrayName1}}"
			},
			"response": []
		},
		{
			"name": "Delete Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete volume successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volumes\": [{\"name\": \"{{volNameArr2}}0\", \"isMounted\": true}]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/delete_volumes/{{arrayName2}}"
			},
			"response": []
		},
		{
			"name": "Get get_all_volumes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "http://{{host}}:{{port}}/api/v1/get_all_volumes/"
			},
			"response": []
		},
		{
			"name": "unmount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/array/mount"
			},
			"response": []
		},
		{
			"name": "unmount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/array/mount"
			},
			"response": []
		},
		{
			"name": "mount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"array\": \"{{arrayName1}}\",\r\n    \"writeThrough\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/array/mount"
			},
			"response": []
		},
		{
			"name": "mount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"array\": \"{{arrayName2}}\",\r\n    \"writeThrough\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/array/mount"
			},
			"response": []
		},
		{
			"name": "Delete Subsystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\":\"nqn.2019-04.pos:subsystem2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/subsystem/"
			},
			"response": []
		},
		{
			"name": "Configure Telemetry IP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"telemetryIP\": \"{{telemetryIP}}\",\r\n    \"telemetryPort\": \"{{telemetryPort}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/configure"
			},
			"response": []
		},
		{
			"name": "Is Telemetry Configured",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/configure"
			},
			"response": []
		},
		{
			"name": "Check Telemetry Running",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"array\": \"{{arrayName2}}\",\r\n    \"writeThrough\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/checktelemetry"
			},
			"response": []
		},
		{
			"name": "Get Performance data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/perf/all"
			},
			"response": []
		},
		{
			"name": "Start telemetry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/telemetry"
			},
			"response": []
		},
		{
			"name": "Get Telemetry Properties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"array\": \"{{arrayName2}}\",\r\n    \"writeThrough\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/telemetry/properties"
			},
			"response": []
		},
		{
			"name": "Set Telemetry Properties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"category\": \"Common\",\r\n    \"fields\": [\r\n      {\r\n        \"label\": \"Process Uptime Second\",\r\n        \"field\": \"uptime_sec\",\r\n        \"isSet\": true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"category\": \"Device\",\r\n    \"fields\": [\r\n      {\r\n        \"label\": \"Bandwidth\",\r\n        \"field\": \"bandwidth_device\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Capacity\",\r\n        \"field\": \"capacity_device\",\r\n        \"isSet\": false\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"category\": \"Disk SMART Info\",\r\n    \"fields\": [\r\n      {\r\n        \"label\": \"Soft Media Error Lower\",\r\n        \"field\": \"soft_media_error_lower\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Soft Media Error Upper\",\r\n        \"field\": \"soft_media_error_upper\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Power Cycle Error Lower\",\r\n        \"field\": \"power_cycle_error_lower\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Power Cycle Error Upper\",\r\n        \"field\": \"power_cycle_error_upper\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Power On Hour Lower\",\r\n        \"field\": \"power_on_hour_lower\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Power On Hour Upper\",\r\n        \"field\": \"power_on_hour_upper\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Unsafe Shutdowns Lower\",\r\n        \"field\": \"unsafe_shutdowns_lower\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Unsafe Shutdowns Upper\",\r\n        \"field\": \"unsafe_shutdowns_upper\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Temperature\",\r\n        \"field\": \"temperature\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Available Spare\",\r\n        \"field\": \"available_spare\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Available Spare Threshold\",\r\n        \"field\": \"available_spare_threshold\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Percentage Used\",\r\n        \"field\": \"percentage used\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Controller Busy Time Lower\",\r\n        \"field\": \"controller_busy_time_lower\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Controller Busy Time Upper\",\r\n        \"field\": \"controller_busy_time_upper\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Warning Temperature Time\",\r\n        \"field\": \"warning_temperature_time\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Critical Temperature Time\",\r\n        \"field\": \"critical_temperature_time\",\r\n        \"isSet\": true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"category\": \"Host\",\r\n    \"fields\": [\r\n      {\r\n        \"label\": \"Host Read IOPS\",\r\n        \"field\": \"read_iops_host\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Host Read Bytes per Second\",\r\n        \"field\": \"read_bytes_per_sec_host\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Host Write IOPS\",\r\n        \"field\": \"write_iops_host\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Host Write Bytes per Second\",\r\n        \"field\": \"write_bytes_per_sec_host\",\r\n        \"isSet\": true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"category\": \"Port\",\r\n    \"fields\": [\r\n      {\r\n        \"label\": \"Port Read IOPS\",\r\n        \"field\": \"read_iops_port\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Port Read Bytes per Second\",\r\n        \"field\": \"read_bytes_per_sec_port\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Port Write IOPS\",\r\n        \"field\": \"write_iops_port\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Port Write Bytes per Second\",\r\n        \"field\": \"write_bytes_per_sec_port\",\r\n        \"isSet\": true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"category\": \"Array\",\r\n    \"fields\": [\r\n      {\r\n        \"label\": \"Array Capacity\",\r\n        \"field\": \"capacity_array\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Used Array\",\r\n        \"field\": \"used_array\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Array State\",\r\n        \"field\": \"state_array\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Array Status\",\r\n        \"field\": \"array_status\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Array Total Capacity\",\r\n        \"field\": \"array_capacity_total\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Array Capacity Used\",\r\n        \"field\": \"array_capacity_used\",\r\n        \"isSet\": true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"category\": \"Volume\",\r\n    \"fields\": [\r\n      {\r\n        \"label\": \"Volume Capacity\",\r\n        \"field\": \"capacity_volume\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Volume Used\",\r\n        \"field\": \"used_volume\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Volume State\",\r\n        \"field\": \"state_volume\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Read Latency\",\r\n        \"field\": \"read_latency\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Write Latency\",\r\n        \"field\": \"write_latency\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Average Latency\",\r\n        \"field\": \"average_latency\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Reads Per Second\",\r\n        \"field\": \"number_of_reads_per_sec\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Writes Per Second\",\r\n        \"field\": \"number_of_writes_per_sec\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"IO Requests Per Second\",\r\n        \"field\": \"number_of_io_reqs_per_sec\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Read Bytes Per Second\",\r\n        \"field\": \"number_of_read_bytes_per_sec\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Write Bytes Per Second\",\r\n        \"field\": \"number_of_write_bytes_per_sec\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Average IO Size\",\r\n        \"field\": \"average_io_size\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Read IOPS\",\r\n        \"field\": \"iops_read\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"Write IOPS\",\r\n        \"field\": \"iops_write\",\r\n        \"isSet\": true\r\n      },\r\n      {\r\n        \"label\": \"IOPS\",\r\n        \"field\": \"iops\",\r\n        \"isSet\": true\r\n      }\r\n    ]\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1/telemetry/properties"
			},
			"response": []
		},
		{
			"name": "Stop Telemetry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/telemetry"
			},
			"response": []
		},
		{
			"name": "Reset Telemetry IP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": "http://{{host}}:{{port}}/api/v1/configure"
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token =  response[\"token\"];\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', '');\r",
							"\r",
							"pm.test(\"Logout complete...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"admin\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://{{host}}:{{port}}/api/v1.0/login/",
				"description": "login to MTool"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
